import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.util.*;
import java.io.IOException;

public class main {
    public static void main(String[] args) throws IOException{

	// we expect exactly one argument: the name of the input file
	if (args.length!=1) {
	    System.err.println("\n");
	    System.err.println("Simple calculator\n");
	    System.err.println("=================\n\n");
	    System.err.println("Please give as input argument a filename\n");
	    System.exit(-1);
	}
	String filename=args[0];

	// open the input file
	CharStream input = CharStreams.fromFileName(filename);
	    //new ANTLRFileStream (filename); // depricated
	
	// create a lexer/scanner
	simpleCalcLexer lex = new simpleCalcLexer(input);
	
	// get the stream of tokens from the scanner
	CommonTokenStream tokens = new CommonTokenStream(lex);
	
	// create a parser
	simpleCalcParser parser = new simpleCalcParser(tokens);
	
	// and parse anything from the grammar for "start"
	ParseTree parseTree = parser.start();

	// Construct an interpreter and run it on the parse tree
	Interpreter interpreter = new Interpreter();
	AST result=interpreter.visit(parseTree);
	
	System.out.println("The result is: "+result.eval(new Environment()));
    }
}

abstract class AST{
    abstract public Double eval(Environment env);
};

class Start extends AST {
    public List<Assign> as;
    public Expr e;
    Start(List<Assign> as, Expr e){ this.as=as; this.e=e;}
    public Double eval(Environment env){
	for (Assign a:as)
	    a.eval(env);
	return e.eval(env);
    };
}

class Assign extends AST{
    public String variable;
    public Expr e;
    Assign(String variable, Expr e){ this.variable=variable; this.e=e; }
    public Double eval(Environment env){
	env.setVariable(variable,e.eval(env));
	return null;
    }
}

abstract class Expr extends AST{
}

class Multiplication extends Expr{
    public Expr e1;
    public Expr e2;
    Multiplication(Expr e1, Expr e2){ this.e1=e1; this.e2=e2;}
    public Double eval(Environment env){
	return e1.eval(env) * e2.eval(env);
    }
}

class Addition extends Expr{
    public Expr e1;
    public Expr e2;
    Addition(Expr e1, Expr e2){ this.e1=e1; this.e2=e2;}
    public Double eval(Environment env){
	return e1.eval(env) + e2.eval(env);
    }
}

class Subtraction extends Expr{
    public Expr e1;
    public Expr e2;
    Subtraction(Expr e1, Expr e2){ this.e1=e1; this.e2=e2;}
    public Double eval(Environment env){
	return e1.eval(env) - e2.eval(env);
    }
}

class Constant extends Expr{
    public Double v;
    Constant(Double v){ this.v=v;}
    public Double eval(Environment env){
	return v;
    }

}

class Variable extends Expr{
    public String v;
    Variable(String v){ this.v=v;}
    public Double eval(Environment env){
	return env.getVariable(v);
    }    
}

// We write an interpreter that implements interface
// "simpleCalcVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double> implements simpleCalcVisitor<Double> {

    // An environment mapping variablenames to double values (initially empty)
    public static HashMap<String,Double> env=new HashMap<String,Double>();

    public Double visitStart(simpleCalcParser.StartContext ctx){
        // New implementation: visit all assignments:
        for (simpleCalcParser.AssignContext a:ctx.as)
            visit(a);
        return visit(ctx.e);
    };

    public Double visitParenthesis(simpleCalcParser.ParenthesisContext ctx){
        return visit(ctx.e);
    };

    public Double visitVariable(simpleCalcParser.VariableContext ctx){
        // New implementation: look up the value of the variable in the environment env:
        String varname=ctx.x.getText();
        Double d=env.get(varname);
        if (d==null){
            System.err.println("Variable "+varname+" is not defined.\n");
            System.exit(-1);
        }
        return d;
    };

    public Double visitAddition(simpleCalcParser.AdditionContext ctx){
        if (ctx.op.getText().equals("+"))
            return visit(ctx.e1)+visit(ctx.e2);
        else
            return visit(ctx.e1)-visit(ctx.e2 );
    };

    public Double visitMultiplication(simpleCalcParser.MultiplicationContext ctx){
        return visit(ctx.e1)*visit(ctx.e2);
    };

    public Double visitConstant(simpleCalcParser.ConstantContext ctx){
        return Double.parseDouble(ctx.c.getText());
    };

    public Double visitSignedConstant(simpleCalcParser.SignedConstantContext ctx){
        return Double.parseDouble(ctx.getText());
    };

    public Double visitAssign(simpleCalcParser.AssignContext ctx){
        // New implementation: evaluate the expression and store it in the environment for the given
        // variable name
        String varname=ctx.x.getText();
        Double v = visit(ctx.e);
        env.put(varname,v);

        return v;
    }

    @Override
    public Double visitAssignment(simpleCalcParser.AssignmentContext ctx) {
        return visit(ctx.a);
    }

    @Override
    public Double visitExpression(simpleCalcParser.ExpressionContext ctx) {
        return visit(ctx.e);
    }

    @Override
    public Double visitSequence(simpleCalcParser.SequenceContext ctx) {
        for (simpleCalcParser.AssignmentsContext a : ctx.a) {
            visit(a);
        }

        return null;
    }

    @Override
    public Double visitWhile(simpleCalcParser.WhileContext ctx) {
        while(visit(ctx.c) == 1.0) {
            visit(ctx.e);
        }
        return null;
    }

    @Override
    public Double visitLessOrEqual(simpleCalcParser.LessOrEqualContext ctx) {
        if (visit(ctx.e1) >= visit(ctx.e2)) {
            return 1.0;
        }
        else return null;
    }

    @Override
    public Double visitEquals(simpleCalcParser.EqualsContext ctx) {
        if (visit(ctx.e1).equals(visit(ctx.e2))) {
            return 1.0;
        }
        else return null;
    }

    @Override
    public Double visitNot(simpleCalcParser.NotContext ctx) {
        if (visit(ctx.c1) == 1.0) {
            return null;
        }
        else return 1.0;
    }

    @Override
    public Double visitBigger(simpleCalcParser.BiggerContext ctx) {
        if (visit(ctx.e1) < visit(ctx.e2)) {
            return 1.0;
        }
        else return null;
    }

    @Override
    public Double visitNotEqual(simpleCalcParser.NotEqualContext ctx) {
        if (!visit(ctx.e1).equals(visit(ctx.e2))) {
            return 1.0;
        }
        else return null;
    }

    @Override
    public Double visitOr(simpleCalcParser.OrContext ctx) {
        if (visit(ctx.c1)== 1.0 || visit(ctx.c2) == 1.0) {
            return 1.0;
        }
        else return null;
    }

    @Override
    public Double visitAnd(simpleCalcParser.AndContext ctx) {
        if (visit(ctx.c1)== 1.0 && visit(ctx.c2) == 1.0) {
            return 1.0;
        }
        else return null;
    }

    @Override
    public Double visitBiggerOrEqual(simpleCalcParser.BiggerOrEqualContext ctx) {
        if (visit(ctx.e1) <= visit(ctx.e2)) {
            return 1.0;
        }
        else return null;
    }

    @Override
    public Double visitLess(simpleCalcParser.LessContext ctx) {
        if (visit(ctx.e1) > visit(ctx.e2)) {
            return 1.0;
        }
        else return null;
    }
}
